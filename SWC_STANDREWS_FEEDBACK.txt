Bash session (Thursday 1 and 2: LI - Leanne)

Lead instructor: Leanne

Positives: 
-Lots of good commands 
-can combine commands into one
-May helpers, liked post-it note method
-Remembering how much can be done just with command line
-Great atmosphere
-Fun refresher
-Some things can be done quicker outside R
-Not everything was on the webpage e.g. data by email.
-Good intro on how to use unix commands
-Piping!
-Reminder of commands
-DonÕt use rm * !!
-Learning how to process files
-Commands in Git bash shell
-Confidence gained in programming outside R
- >> : Needed this command.
- <  DidnÕt know this 
- All good, no complaints
-Discovery of unix commands in windows
-All the commands learned. Pipe as the thing that comes to head
-Great intro to terminal commands
-Commands useful to know
-Like the root system
-Piping instead of routing output to files
-Good recap of unix
-Never type rm Ðr /
-Concepts well explained
-Rhythm is fine for beginners at least
-Using a different approach to access and modify files
-Renaming and organising files was an excellent Ôtake homeÕ
-Good introduction to the program. Clear instructor. 
-Huge take home: DonÕt ever type Ôrm Ðr /Õ
-Notes and exercises look useful for future reference.
-Be careful with ÔrmÕ
-Course prep material was very comprehensive
-Pipes are a good Ôtake-homeÕ
-Redirect output to files.
-Lots of unix commands, good intro.
-Rapid file management
-Logical stuff
-Huge take home: Programming improving.
-Take home: Always double-check commands
-Meaning of ../
-New commands. Have an idea how to use them
-Very good grounding in Unix this morning

Negatives:
-slow on easy stuff, too fast on complex stuff
-reinforce whatÕs been done before moving on
-sometimes a bit fast. I was writing and thinking and watching at the same time; not easy if not familiar. Normally catch up by looking at the screen but command lines had gone by then
-Need to think where to apply lesson (e.g. real life examples)
-Learn how to use ÔfindÕ
-A bit slow. Not enough Ôbig pictureÕ at the beginning of why we should be using the command line.
-Provide list of commands prior. Easier to keep track
-Also a bit confusing: jumps around.
-Classroom squashed.
-Not sure where my ÔDesktopÕ is in relation to C: drive.
-Few introductory comments about why learn command prompt, particularly for subsequent GitHub interface
-Commands might be a bit restrictive
-Example data directory structure too complex. Challenging: Scripting commands as questions: ÔWhat does ÔxÕ do?Õ is less satisfactory when too many answers like ÔgrepÕ come up. Confusing.
-Maybe after the questions are answered Ð do the actual example to see the solution output.
-Bit too slow
-Started a bit slow
-A little slow but I have used linux before.
-Explain clearly when it is a theoretical exercise (thought exercise) and when it is a practical one (e.g. typing into your terminal)
-Bit slow for non-beginners (IÕm a beginner so fine with me)
-DidnÕt quite understand why the cp exercise worked why it did (but will practice)
-It felt a bit fast at the beginning  but got better later. I think it could be an issue if someone is very unfamiliar with this type of programming
-The counting lines part was a bit confusing.
-Unix command teaching  was too slow (I already know unix)
-More time to explain more advanced command line file management.
-Directory navigation (getting there though)
-Some confusion with command users Ô>Õ if without Ô>Õ  for example. 
-Sometimes too fast
-Not take home: WhatÕs ? for ? All this ?
-Beginning too slow with bash info
-More practice
-More real-world examples







Bash (Thursday 3; LI Ð Leanne ) and R Part 1 (Thursday 4; LI - Fatima). The feedback covers both:

Positive:
-Unix makes sense, all fine
-R really useful straight approach. Useful to have the opportunity to ask questions to human beings.
-Good to use unix shell again after having to move to windows.
-Learned how to use functions!
-Showing what commands in R are for in bash (should have done that earlier)
-Unix second session: good to learn loops and scripts
-Something new: R not used that often.
-Good level of calculations for me (as a beginner).
-Basics in R studio
-Very useful lesson on bash loops and shell
-Clear lessons and examples
-The afternoon bash session was very interesting
-Notes provide a good R introduction.

Negative:
-A bit slow, especially R session (but teacher was good)
-R session not really applicable to me as I use R (write packages for CRAW)
-The beginning of the R session was too fast and then too slow
-Functions/loops in R was too fast. I thought learning this was an important aspect of the course.
-Extremely basic (but I am an R user and write packages)
-Mention lessons online (Unix and R)
-Answers to exercises would be good (Unix)
-R session mystifying. No engagement with beginners so IÕd have been better off reading a tutorial
-Too basic for current knowledge level
-Too short, maybe more detail will help
-Function part could be a little bit more structured (explain better the basic R coding we are using, e.g. read.csv)
-Delivery was too slow. Can speed up.
-DonÕt run code that throws error unless you know what caused the error.
-Probably too basic. Still useful though.
-R session slow because familiar with R. So perhaps could skip for some audiences.
-Too fast. Listing of R commands on whiteboard would have been helpful.
-No time for getting help.
-Not explained as clear as the morning. Jumped though things without explaining that you were (?)/ Not great for holding attention. Hard to follow.

R Part 2 (Friday 1: LI- Fatima)

Positive:
-Great to learn about Shell/R interfacing
-Learned some new commands in R.
-Good programming practice and conventions
-Very useful to get some sample code
-Learning to interact between Rscripts and command line.
-Good session
-Good overview of function calling another function.
-Good learning how to use R in commands line
-Very positive learning to call R from command line

Negative:
-Some of the explanations used too many technical terms making them impossible to understand.
-When giving code, give some comments on the script.
-Not so good: Nothing!
-Either learn R or learn how to run scripts in bash. Complicated to do both at same time.
-Need a bigger picture of why we should use R from the command line instead of an R session
-Participants fragmented during R command line I was unsure as to whether I ought to watch instructor or work with code

Git Part 1 (Friday 2: LI: Leanne)

Positives:
-Clear intro into the Git environment
-Really great start with Git, thank you
-Git stuff was very helpful
-Good intro to Git 
-Git commit lessons easy to follow. Everyone in room working together
-Good intro to git
-Good to learn how to configure and use Git from command line
-Good overview of creating Git and using
-Good to see Git done on local machine

Negatives:
-Cant think of anything
-Not convinced to move from Git Gui.


Git Part 1 (Friday 3: LI: Alexander )
and
Git Part 2 (Friday 4: LI: Alexander)  & R Follow up (LI: Fatima)

Positives:
- Very good! Advanced and useful. No useless explanations and a fast talk
- Good handy info on Git + very useful to talk to people
- bash commands
- Git! great
- for ... do ... done
- Running R scripts from bash
- How to check in which direction forks will be merged in Git
- Learned bash, pipes, general Git
- Learned bash commands, using Git, additional R functions
- Modifying files/folders using shell bash
- Creating loop
- Being introduced to Git
- (learned) cd, ls, pwd; basics of using R - although would have to look up specific
  details; some vague idea of Git. Liked to have learned.
- 3 things I learned: git set up; git collaborator; git resolve conflicts
- 3 things I learned: working and being comfortable in bash command line; scripting and
  using it from the command line
- Learned: R structure of writing; Git
- Learned: Git/GitHub; R scripts; some new R commands
- Learned: Unix things; better GitHub; Rscript functionality
- Loops; pipes; Intro to GitHub
- git; collaboration with others using Git; command line arguments to an R script

Negatives:
- (on R parts): I would have preferred if first the problem was introduced, then code.
  Found this very hard to follow outside previous experience in R.
- missed: "applied" Git e.g. how to manage thesis project; Python (subdirectories etc.)
- it's better to type commands fully: some people are getting a mess when trying to copy and paste
- how to create our own scripts (e.g. loops to calculate means, std. histograms, etc. in R
  on a bunch of files). More work on the basis of the syntax
- (wish): more advanced R; a bit on parallel processing; more on good coding practice
- R loops required more time
- R functions required more explanation
- RStudio was rushed
- Like to learn: intro to data mining; best modular scripting practice
- I would like to have a bit more of scripts in the programme
- I think a bit of organisation would have helped to improved
- 3 things I would like to learn: Rscript. my R code ... did not work; example like
  sd(...) in Rscript and called terminal; advantage of call R in terminal
- the 1st R lesson was a bit frustrating and maybe a bit confusing
- more time maybe for GitHub and how to put everything together
- Would like to learn: Python; more advanced lessons
- Be more confident with GitHub
- Like to learn: more complex command line R; packages for R; Markdown/knitr
- functions - spend a little bit more time in this
- R packages; project architecture in Git; SQL
